{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import numpy as np\n",
    "import json\n",
    "from numpy import array\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "response = requests.get('http://165.22.250.235/api/assessment/mengwai8@gmail.com?date=09-07-2020')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "print (response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\"email\":\"mengwai8@gmail.com\",\"samples\":\"8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5\"}\n"
     ]
    }
   ],
   "source": [
    "print (response.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "resp = (response.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert donwloaded data to dict\n",
    "loader = json.loads(resp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'email': 'mengwai8@gmail.com',\n",
       " 'samples': '8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5'}"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = response.json() #to convert json response into dict "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5'"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " data[\"samples\"] # extract samples data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert data using series\n",
    "df=pd.Series(data).to_frame('data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>email</th>\n",
       "      <td>mengwai8@gmail.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>samples</th>\n",
       "      <td>8.28,145.074,108.408,7.642,180.111,25.745,174....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      data\n",
       "email                                   mengwai8@gmail.com\n",
       "samples  8.28,145.074,108.408,7.642,180.111,25.745,174...."
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=(df.data[\"samples\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5'"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "split1=(df1).split (\",\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.28\n",
      "145.074\n",
      "108.408\n",
      "7.642\n",
      "180.111\n",
      "25.745\n",
      "174.746\n",
      "195.935\n",
      "95.89\n",
      "66.879\n",
      "170.192\n",
      "189.963\n",
      "24.121\n",
      "6.62\n",
      "173.282\n",
      "19.694\n",
      "162.196\n",
      "192.12\n",
      "4.681\n",
      "89.005\n",
      "108.468\n",
      "162.53\n",
      "125.029\n",
      "145.547\n",
      "119.177\n",
      "17.972\n",
      "171.5\n"
     ]
    }
   ],
   "source": [
    "for i in split1:\n",
    "    print (i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [],
   "source": [
    "array1=np.array(split1).astype(np.float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "107.06692592592596"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_cal=np.mean(array1)\n",
    "mean_cal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4640.8072414759945"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_cal=np.var(array1)\n",
    "var_cal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "argmax_cal=np.argmax(array1)\n",
    "argmax_cal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\"{\\\\\"email\\\\\":\\\\\"mengwai8@gmail.com\\\\\",\\\\\"samples\\\\\":\\\\\"8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5\\\\\"}\"'"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert raw to dump and amend\n",
    "convert=json.dumps (response.text)\n",
    "convert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\"{\\\\\"email\\\\\":\\\\\"mengwai8@gmail.com\\\\\",\\\\\"samples\\\\\":\\\\\"8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5\\\\\"\"'"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#method1 using json dump - cannot work. json append also cannot work because the format is not \n",
    "replace_end_bracket=str(convert).replace(\"}\",\"\")\n",
    "replace_end_bracket"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\"{\\\\\"email\\\\\":\\\\\"mengwai8@gmail.com\\\\\",\\\\\"samples\\\\\":\\\\\"8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5\\\\\"\"&mean107.06692592592596&variance4640.8072414759945&argmax7}'"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str(replace_end_bracket)+\"&mean\"+ str(mean_cal)+\"&variance\"+ str(var_cal)+\"&argmax\"+ str(argmax_cal)+\"}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "#method2 using string replace to remove the \"}\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"{'email': 'mengwai8@gmail.com', 'samples': '8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5'\""
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "replace_end_bracket2=str(loader).replace(\"}\",\"\")\n",
    "replace_end_bracket2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"{'email': 'mengwai8@gmail.com', 'samples': '8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5'&mean107.06692592592596&variance4640.8072414759945&argmax7}\""
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# try here replacing end bracket and joining mean, varaince, argmax\n",
    "# cannot send to endpoint\n",
    "app= str(replace_end_bracket2)+\"&mean\"+ str(mean_cal)+\"&variance\"+ str(var_cal)+\"&argmax\"+ str(argmax_cal)+\"}\"\n",
    "app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [],
   "source": [
    "#orginal good string append. but has a \"}\" insdie \n",
    "app1= str(loader)+\"&mean\"+ str(mean_cal)+\"&variance\"+ str(var_cal)+\"&argmax\"+ str(argmax_cal)+\"}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\"{\\'email\\': \\'mengwai8@gmail.com\\', \\'samples\\': \\'8.28,145.074,108.408,7.642,180.111,25.745,174.746,195.935,95.89,66.879,170.192,189.963,24.121,6.62,173.282,19.694,162.196,192.12,4.681,89.005,108.468,162.53,125.029,145.547,119.177,17.972,171.5\\'&mean107.06692592592596&variance4640.8072414759945&argmax7}\"'"
      ]
     },
     "execution_count": 309,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cannot send to endpoint\n",
    "convert_to_json=json.dumps(app)\n",
    "convert_to_json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [404]>"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "requests.post('http://165.22.250.235/api/assessment/mengwai8@gmail.com?date=09-07-2020',app)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [404]>"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "requests.post('http://165.22.250.235/api/assessment/mengwai8@gmail.com?date=09-07-2020',convert_to_json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\"{\\\\\"email\\\\\":\\\\\"mengwai8@gmail.com\\\\\",\\\\\"samples\\\\\":\\\\\"89.272,27.933,140.297,11.288,147.012,24.996,189.697,42.771,7.962,144.987,5.297,178.588,21.543,113.576,18.763,74.717,26.107,65.196,157.783,84.321,171.032,60.097,177.847,39.611,71.703\\\\\"}\"'"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert raw to dump and amend\n",
    "# cannot load into endpoint\n",
    "convert=json.dumps (response.text)\n",
    "convert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "requests.post('http://165.22.250.235/api/assessment/mengwai8@gmail.com?date=09-07-2020',convert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
